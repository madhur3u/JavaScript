[
	{
		"name": "Welcome to Java!",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/WelcomeToJava.java",
		"sol": "\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\n/**\n\n*\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // WelcomeToJava {\n\n\n\npublic static void main(String[] args) {\n\nSystem.out.println(\"Hello, World.\");\n\nSystem.out.println(\"Hello, Java.\");\n\n\n\n}\n\n}\n"
	},
	{
		"name": "Java Stdin and Stdout I",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaStdinAndStdoutI.java",
		"sol": "\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n*\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaStdinAndStdoutI {\n\n\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint a = sc.nextInt();\n\nint b = sc.nextInt();\n\nint c = sc.nextInt();\n\nsc.close();\n\nSystem.out.println(a);\n\nSystem.out.println(b);\n\nSystem.out.println(c);\n\n\n\n}\n\n}\n"
	},
	{
		"name": "Java If-Else",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaIfElse.java",
		"sol": "\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n*\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaIfElse {\n\n\n\npublic static void main(String[] args) {\n\n\n\nScanner sc = new Scanner(System.in);\n\nint n = sc.nextInt();\n\nString ans = \"\";\n\nif (n % 2 == 1) {\n\nans = \"Weird\";\n\n} else {\n\n\n\nif (n >= 6 && n <= 20) {\n\nans = \"Weird\";\n\n} else {\n\nans = \"Not Weird\";\n\n}\n\n\n\n}\n\nSystem.out.println(ans);\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Stdin and Stdout II",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaStdinAndStdoutII.java",
		"sol": "\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n*\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaStdinAndStdoutII {\n\n\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint i = sc.nextInt();\n\ndouble d = sc.nextDouble();\n\nsc.nextLine();\n\nString s = sc.nextLine();\n\nsc.close();\n\nSystem.out.println(\"String: \" + s);\n\nSystem.out.println(\"Double: \" + d);\n\nSystem.out.println(\"Int: \" + i);\n\n}\n\n}\n"
	},
	{
		"name": "Java Output Formatting",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaOutputFormatting.java",
		"sol": "\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n*\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaOutputFormatting {\n\n\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nSystem.out.println(\"================================\");\n\nfor (int i = 0; i < 3; i++) {\n\nString s1 = sc.next();\n\nint x = sc.nextInt();\n\nSystem.out.printf(\"%-15s%03d\\n\", s1, x);\n\n}\n\nSystem.out.println(\"================================\");\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Loops I",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaLoopsI.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaLoopsI {\n\n\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nint N = in.nextInt();\n\nfor (int i = 1; i <= 10; i++) {\n\nSystem.out.println(N + \" x \" + i + \" = \" + N * i);\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Loops II",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaLoopsII.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaLoopsII {\n\npublic static void main(String[] argh) {\n\nScanner in = new Scanner(System.in);\n\nint t = in.nextInt();\n\nfor (int i = 0; i < t; i++) {\n\nint a = in.nextInt();\n\nint b = in.nextInt();\n\nint n = in.nextInt();\n\nint temp = a;\n\nfor (int j = 0; j < n; j++) {\n\ntemp += (Math.pow(2, j) * b);\n\nSystem.out.print(temp + \" \");\n\n}\n\nSystem.out.println();\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Datatypes",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaDatatypes.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaDatatypes {\n\npublic static void main(String[] argh) {\n\n\n\nScanner sc = new Scanner(System.in);\n\nint t = sc.nextInt();\n\n\n\nfor (int i = 0; i < t; i++) {\n\n\n\ntry {\n\nlong x = sc.nextLong();\n\nSystem.out.println(x + \" can be fitted in:\");\n\nif (x >= -128 && x <= 127)\n\nSystem.out.println(\"* byte\");\n\nif (x >= -(Math.pow(2, 16 - 1)) && x <= (Math.pow(2, 16 - 1) - 1))\n\nSystem.out.println(\"* short\");\n\nif (x >= -(Math.pow(2, 32 - 1)) && x <= (Math.pow(2, 32 - 1) - 1))\n\nSystem.out.println(\"* int\");\n\nif (x >= -(Math.pow(2, 64 - 1)) && x <= (Math.pow(2, 64 - 1) - 1))\n\nSystem.out.println(\"* long\");\n\n\n\n} catch (Exception e) {\n\nSystem.out.println(sc.next() + \" can't be fitted anywhere.\");\n\n}\n\n\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java End-of-file",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaEndOfFile.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaEndOfFile {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint i = 1;\n\nwhile (sc.hasNext()) {\n\nSystem.out.println(i++ + \" \" + sc.nextLine());\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Static Initializer Block",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Introduction/Java%20Static%20Initializer%20Block/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport java.text.*;\n\nimport java.math.*;\n\nimport java.util.regex.*;\n\n\n\npublic class Solution {\n\nprivate static int B;\n\nprivate static int H;\n\nprivate static boolean flag;\n\n\n\nstatic {\n\nScanner scan = new Scanner(System.in);\n\nB = scan.nextInt();\n\nH = scan.nextInt();\n\nscan.close();\n\nif (B <= 0 || H <= 0) {\n\nSystem.out.println(\"java.lang.Exception: Breadth and height must be positive\");\n\nflag = false;\n\n} else {\n\nflag = true;\n\n}\n\n}\n\n\n\npublic static void main(String[] args) {\n\nif (flag) {\n\nint area = B * H;\n\nSystem.out.print(area);\n\n}\n\n} // end of main\n\n} // end of class\n"
	},
	{
		"name": "Java Int to String",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Introduction/Java%20Int%20to%20String/Solution.java",
		"sol": "\nimport java.util.*;\nimport java.security.*;\npublic class Solution {\n public static void main(String[] args) {\n  DoNotTerminate.forbidExit();\n  try {\n   Scanner in = new Scanner(System.in);\n   int n = in .nextInt();\n   in.close();\n   //String s=???; Complete this line below\n   //Write your code here\n   String s = \"\" + n;\n   \n   if (n == Integer.parseInt(s)) {\n    System.out.println(\"Good job\");\n   } else {\n    System.out.println(\"Wrong answer.\");\n   }\n  } catch (DoNotTerminate.ExitTrappedException e) {\n   System.out.println(\"Unsuccessful Termination!!\");\n  }\n }\n}\n//The following class will prevent you from terminating the code using exit(0)!\nclass DoNotTerminate {\n public static class ExitTrappedException extends SecurityException {\n  private static final long serialVersionUID = 1;\n }\n public static void forbidExit() {\n  final SecurityManager securityManager = new SecurityManager() {\n   @Override\n   public void checkPermission(Permission permission) {\n    if (permission.getName().contains(\"exitVM\")) {\n     throw new ExitTrappedException();\n    }\n   }\n  };\n  System.setSecurityManager(securityManager);\n }\n}\n"
	},
	{
		"name": "Java Date and Time",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/introduction/JavaDateAndTime.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.introduction;\n\n\n\nimport java.time.LocalDate;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaDateAndTime {\n\n\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nint month = in.nextInt();\n\nint day = in.nextInt();\n\nint year = in.nextInt();\n\nLocalDate dt = LocalDate.of(year, month, day);\n\nSystem.out.println(dt.getDayOfWeek());\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Currency Formatter",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaCurrencyFormatter.java",
		"sol": "\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\npublic class Solution {\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n        Scanner s = new Scanner(System.in);\n        formatPayment(s.nextDouble());\n    }\n    \n    public static void formatPayment(double d) {\n        DecimalFormat us = new DecimalFormat(\"\\u0024###,###,###.00\");\n        NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.US);\n        System.out.println(\"US: \" + us.format(d));\n        \n    \n        DecimalFormat ind = new DecimalFormat(\"###,###,###.00\");\n        System.out.println(\"India: Rs.\" + ind.format(d));\n        \n        \n        DecimalFormat prc = new DecimalFormat(\"\\uFFE5###,###,###.00\");\n        System.out.println(\"China: \" + prc.format(d));\n        \n        DecimalFormatSymbols dfs = new DecimalFormatSymbols();\n        dfs.setDecimalSeparator(',');\n        char r = 160;\n        dfs.setGroupingSeparator(r);\n        DecimalFormat eur = new DecimalFormat(\"###,###,###.00 \\u20ac\", dfs);\n        System.out.println(\"France: \" + eur.format(d));\n    }\n}"
	},
	{
		"name": "Java Strings Introduction",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaStringsIntroduction.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaStringsIntroduction {\n\npublic static void main(String[] args) {\n\n\n\nScanner sc = new Scanner(System.in);\n\nString A = sc.next();\n\nString B = sc.next();\n\nSystem.out.println(A.length() + B.length());\n\nint l = A.length() > B.length() ? B.length() : A.length();\n\nString str = \"\";\n\nfor (int i = 0; i < l; i++) {\n\nif ((int) (A.toLowerCase()).charAt(i) > (int) (B.toLowerCase()).charAt(i)) {\n\nstr = \"Yes\";\n\nbreak;\n\n} else if ((A.toLowerCase()).charAt(i) < (B.toLowerCase()).charAt(i)) {\n\nstr = \"No\";\n\nbreak;\n\n}\n\n}\n\nif (str == \"\") {\n\nif (A.length() > B.length()) {\n\nstr = \"Yes\";\n\n} else {\n\nstr = \"No\";\n\n}\n\n}\n\nSystem.out.println(str);\n\n\n\nSystem.out.println((A.toUpperCase()).charAt(0) + A.substring(1, A.length()) + \" \" + (B.toUpperCase()).charAt(0)\n\n+ B.substring(1, B.length()));\n\nsc.close();\n\n}\n\n\n\n}\n"
	},
	{
		"name": "Java Substring",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaSubstring.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaSubstring {\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nString S = in.next();\n\nint start = in.nextInt();\n\nint end = in.nextInt();\n\nSystem.out.println(S.substring(start, end));\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Substring Comparisons",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaSubstringComparisons.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaSubstringComparisons {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nArrayList<String> list = new ArrayList<String>();\n\nString s = sc.next();\n\nint k = sc.nextInt();\n\nfor (int i = 0; i <= s.length() - k; i++) {\n\nString tmp = s.substring(i, k + i);\n\nlist.add(tmp);\n\n}\n\nCollections.sort(list);\n\nSystem.out.println(list.get(0));\n\nSystem.out.println(list.get(list.size() - 1));\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java String Reverse",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaStringReverse.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaStringReverse {\n\npublic static void main(String[] args) {\n\n\n\nScanner sc = new Scanner(System.in);\n\nString A = sc.next();\n\nsc.close();\n\nboolean found = true;\n\nfor (int i = 0; i < A.length() / 2; i++) {\n\nif (A.charAt(i) != A.charAt(A.length() - 1 - i)) {\n\nfound = false;\n\nbreak;\n\n}\n\n}\n\nSystem.out.println(found ? \"Yes\" : \"No\");\n\n}\n\n}\n"
	},
	{
		"name": "Java Anagrams",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Strings/Java%20Anagrams/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.io.*;\n\nimport java.util.*;\n\n\n\npublic class Solution {\n\n//  Time Complexity: O(n) using a HashMap\n\n// Space Complexity: O(n)\n\nstatic boolean isAnagram(String a, String b) {\n\nif (a == null || b == null || a.length() != b.length()) {\n\nreturn false;\n\n}\n\na = a.toLowerCase();\n\nb = b.toLowerCase();\n\nHashMap<Character, Integer> map = new HashMap();\n\n\n\n/* Fill HashMap with 1st String */\n\nfor (int i = 0; i < a.length(); i++) {\n\nchar ch = a.charAt(i);\n\nmap.merge(ch, 1, Integer::sum);\n\n}\n\n\n\n/* Compare 2nd String to 1st String's HashMap */\n\nfor (int i = 0; i < b.length(); i++) {\n\nchar ch = b.charAt(i);\n\nif (map.containsKey(ch) && map.get(ch) > 0) {\n\nmap.put(ch, map.get(ch) - 1);\n\n} else {\n\nreturn false;\n\n}\n\n}\n\nreturn true;\n\n}\n\n\n\npublic static void main(String[] args) {\n\nScanner scan = new Scanner(System.in);\n\nString a = scan.next();\n\nString b = scan.next();\n\nscan.close();\n\nboolean ret = isAnagram(a, b);\n\nSystem.out.println( (ret) ? \"Anagrams\" : \"Not Anagrams\" );\n\n}\n\n}\n"
	},
	{
		"name": "Java String Tokens",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaStringTokens.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaStringTokens {\n\npublic static void main(String[] args) {\n\nScanner scan = new Scanner(System.in);\n\nString s = scan.nextLine();\n\nscan.close();\n\nboolean found = false;\n\nfor (int i = 0; i < s.length(); i++) {\n\nint t = s.charAt(i);\n\nif (65 <= t && t <= 90 || t >= 97 && t <= 112) {\n\nfound = true;\n\nbreak;\n\n}\n\n}\n\nif (found) {\n\nString[] str = s.split(\"[, '@_.?!]+\");\n\nint length = str.length;\n\nif (str[0].length() == 0 || str[str.length - 1].length() == 0) {\n\nlength--;\n\n}\n\nSystem.out.println(length);\n\nfor (String s1 : str)\n\nif (s1.length() != 0)\n\nSystem.out.println(s1);\n\n} else {\n\nSystem.out.println(0);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Pattern Syntax Checker",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/PatternSyntaxChecker.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\nimport java.util.regex.Pattern;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // PatternSyntaxChecker {\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nint testCases = Integer.parseInt(in.nextLine());\n\nwhile (testCases-- > 0) {\n\nString pattern = in.nextLine();\n\ntry {\n\nPattern.compile(pattern);\n\nSystem.out.println(\"Valid\");\n\n} catch (Exception e) {\n\nSystem.out.println(\"Invalid\");\n\n}\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Valid Username Regular Expression",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/ValidUsernameRegularExpression.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\nclass UsernameValidator {\n\n\n\npublic static final String regularExpression = \"^[A-Za-z]\\\\w{7,29}$\";;\n\n\n\n}\n\n\n\npublic class Solution { // ValidUsernameRegularExpression {\n\nprivate static final Scanner scan = new Scanner(System.in);\n\n\n\npublic static void main(String[] args) {\n\nint n = Integer.parseInt(scan.nextLine());\n\nwhile (n-- != 0) {\n\nString userName = scan.nextLine();\n\n\n\nif (userName.matches(UsernameValidator.regularExpression)) {\n\nSystem.out.println(\"Valid\");\n\n} else {\n\nSystem.out.println(\"Invalid\");\n\n}\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Tag Content Extractor",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/TagContentExtractor.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\nimport java.util.regex.Matcher;\n\nimport java.util.regex.Pattern;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // TagContentExtractor {\n\npublic static void main(String[] args) {\n\n\n\nScanner in = new Scanner(System.in);\n\nint testCases = Integer.parseInt(in.nextLine());\n\nwhile (testCases > 0) {\n\nString line = in.nextLine();\n\nString regex = \"<(.+)>([^<>]+)(</\\\\1>)\";\n\nPattern p = Pattern.compile(regex);\n\nMatcher m = p.matcher(line);\n\nint counter = 0;\n\nwhile (m.find()) {\n\nif (m.group(2).length() != 0) {\n\nSystem.out.println(m.group(2));\n\ncounter++;\n\n}\n\n\n\n}\n\nif (counter == 0)\n\nSystem.out.println(\"None\");\n\ntestCases--;\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Regex",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaRegex.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.strings;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\nclass MyRegex {\n\nstatic String zeroTo255 = \"(\\\\d{1,2}|(0|1)\\\\d{2}|2[0-4]\\\\d|25[0-5])\";\n\npublic static String pattern = zeroTo255 + \"\\\\.\" + zeroTo255 + \"\\\\.\" + zeroTo255 + \"\\\\.\" + zeroTo255;\n\n\n\n}\n\n\n\npublic class Solution { // JavaRegex {\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nwhile (in.hasNext()) {\n\nString IP = in.next();\n\nSystem.out.println(IP.matches(new MyRegex().pattern));\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Regex 2 - Duplicate Words",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/strings/JavaRegex2DuplicateWords.java",
		"sol": "import java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class DuplicateWords {\npublic static void main(String[] args) {\nString regex = \"\\\\b(\\\\w+)(\\\\s+\\\\1\\\\b)*\";\nPattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);\nScanner in = new Scanner(System.in);\nint numSentences = Integer.parseInt(in.nextLine());\nwhile (numSentences-- > 0) {\nString input = in.nextLine();\nMatcher m = p.matcher(input);\n// Check for subsequences of input that match the compiled pattern\nwhile (m.find()) {\ninput = input.replaceAll(m.group(), m.group(1));\n}\n// Prints the modified sentence.\nSystem.out.println(input);\n}\nin.close();\n}\n}"
	},
	{
		"name": "Java BigInteger",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/bignumber/JavaBigInteger.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.bignumber;\n\n\n\nimport java.math.BigInteger;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaBigInteger {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nBigInteger a = new BigInteger(sc.next());\n\nBigInteger b = new BigInteger(sc.next());\n\nSystem.out.println(a.add(b));\n\nSystem.out.println(a.multiply(b));\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java BigDecimal",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/bignumber/JavaBigDecimal.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.bignumber;\n\n\n\nimport java.math.BigDecimal;\n\nimport java.util.Arrays;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaBigDecimal {\n\npublic static void main(String[] args) {\n\n// Input\n\nScanner sc = new Scanner(System.in);\n\nint n = sc.nextInt();\n\nString[] s = new String[n + 2];\n\nfor (int i = 0; i < n; i++) {\n\ns[i] = sc.next();\n\n}\n\nsc.close();\n\n\n\n// Write your code here\n\nArrays.sort(s, 0, n, Collections.reverseOrder(new Comparator<String>() {\n\npublic int compare(String s1, String s2) {\n\nBigDecimal b1 = new BigDecimal(s1);\n\nBigDecimal b2 = new BigDecimal(s2);\n\nreturn b1.compareTo(b2);\n\n\n\n}\n\n}));\n\n\n\n// Output\n\nfor (int i = 0; i < n; i++) {\n\nSystem.out.println(s[i]);\n\n}\n\n}\n\n\n\n}\n"
	},
	{
		"name": "Java Primality Test",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/bignumber/JavaPrimalityTest.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.bignumber;\n\n\n\nimport java.math.BigInteger;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaPrimalityTest {\n\n\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nBigInteger n = in.nextBigInteger();\n\nin.close();\n\nSystem.out.println(n.isProbablePrime(100) ? \"prime\" : \"not prime\");\n\n}\n\n}\n"
	},
	{
		"name": "Java 1D Array",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/Java1DArray.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // Java1DArray {\n\npublic static void main(String[] args) {\n\n\n\nScanner scan = new Scanner(System.in);\n\nint n = scan.nextInt();\n\n// Declare array a here\n\nint a[]=new int[n];\n\nfor(int i = 0 ; i < n; i++){\n\nint val = scan.nextInt();\n\na[i]=val;\n\n// Fill array a here\n\n}\n\nscan.close();\n\n// Prints each sequential element in array a\n\nfor (int i = 0; i < a.length; i++) {\n\nSystem.out.println(a[i]);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java 2D Array",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/Java2DArray.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // Java2DArray {\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nint arr[][] = new int[6][6];\n\nfor (int i = 0; i < 6; i++) {\n\nfor (int j = 0; j < 6; j++) {\n\narr[i][j] = in.nextInt();\n\n}\n\n}\n\nint maxSum = Integer.MIN_VALUE, sum = 0;\n\n;\n\nfor (int i = 0; i < 6; i++) {\n\nfor (int j = 0; j < 6; j++) {\n\nif ((i + 2 < 6) && (j + 2) < 6) {\n\nsum = arr[i][j] + arr[i][j + 1] + arr[i][j + 2] + arr[i + 1][j + 1] + arr[i + 2][j]\n\n+ arr[i + 2][j + 1] + arr[i + 2][j + 2];\n\nif (sum > maxSum)\n\nmaxSum = sum;\n\n}\n\n}\n\n}\n\nSystem.out.println(maxSum);\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Subarray",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaSubarray.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaSubarray {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint n = sc.nextInt();\n\nint a[] = new int[n];\n\nfor (int i = 0; i < n; i++) {\n\na[i] = sc.nextInt();\n\n}\n\nint count = 0;\n\nfor (int i = 0; i < n; i++) {\n\nint sum = a[i];\n\nif (sum < 0)\n\ncount++;\n\nfor (int j = i + 1; j < n && i + 1 < n; j++) {\n\nsum += a[j];\n\nif (sum < 0) {\n\ncount++;\n\n}\n\n}\n\n}\n\nSystem.out.println(count);\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Arraylist",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaArraylist.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaArraylist {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nList<ArrayList<Integer>> listOfList = new ArrayList<ArrayList<Integer>>();\n\nint n = sc.nextInt();\n\nfor (int i = 0; i < n; i++) {\n\nint m = sc.nextInt();\n\nArrayList<Integer> list = new ArrayList<Integer>();\n\nfor (int j = 0; j < m; j++) {\n\nlist.add(sc.nextInt());\n\n}\n\nlistOfList.add(list);\n\n}\n\n\n\nint q = sc.nextInt();\n\nfor (int k = 0; k < q; k++) {\n\nint r = sc.nextInt();\n\nint c = sc.nextInt();\n\ntry {\n\nint v = listOfList.get(r - 1).get(c - 1);\n\nSystem.out.println(v);\n\n} catch (Exception e) {\n\nSystem.out.println(\"ERROR!\");\n\n}\n\n\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Map",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaMap.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaMap {\n\npublic static void main(String[] argh) {\n\nScanner in = new Scanner(System.in);\n\nMap<String, Integer> hmap = new HashMap<String, Integer>();\n\nint n = in.nextInt();\n\nin.nextLine();\n\nfor (int i = 0; i < n; i++) {\n\nString name = in.nextLine();\n\nint phone = in.nextInt();\n\nhmap.put(name, phone);\n\nin.nextLine();\n\n}\n\nwhile (in.hasNext()) {\n\nString s = in.nextLine();\n\nif (hmap.containsKey(s)) {\n\nSystem.out.println(s + \"=\" + hmap.get(s));\n\n} else {\n\nSystem.out.println(\"Not found\");\n\n}\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Hashset",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaHashset.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.HashSet;\n\nimport java.util.Scanner;\n\nimport java.util.Set;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaHashset {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint t = sc.nextInt();\n\nString[] pair_left = new String[t];\n\nString[] pair_right = new String[t];\n\n\n\nfor (int i = 0; i < t; i++) {\n\npair_left[i] = sc.next();\n\npair_right[i] = sc.next();\n\n}\n\n\n\n// Write your code here\n\nSet<String> set = new HashSet<String>();\n\nfor (int i = 0; i < t; i++) {\n\nset.add(pair_left[i] + \"_\" + pair_right[i]);\n\nSystem.out.println(set.size());\n\n\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Comparator",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaComparator.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Arrays;\n\nimport java.util.Comparator;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\nclass Player {\n\nString name;\n\nint score;\n\n\n\nPlayer(String name, int score) {\n\nthis.name = name;\n\nthis.score = score;\n\n}\n\n}\n\n\n\n// Write your Checker class here\n\nclass Checker implements Comparator<Player> {\n\npublic int compare(Player o1, Player o2) {\n\nif (o1.score == o2.score) {\n\nreturn ((o1.name).compareTo(o2.name));\n\n} else {\n\nreturn ((o2.score - o1.score));\n\n}\n\n}\n\n\n\n}\n\n\n\npublic class Solution { // JavaComparator {\n\npublic static void main(String[] args) {\n\nScanner scan = new Scanner(System.in);\n\nint n = scan.nextInt();\n\n\n\nPlayer[] player = new Player[n];\n\nChecker checker = new Checker();\n\n\n\nfor (int i = 0; i < n; i++) {\n\nplayer[i] = new Player(scan.next(), scan.nextInt());\n\n}\n\nscan.close();\n\n\n\nArrays.sort(player, checker);\n\nfor (int i = 0; i < player.length; i++) {\n\nSystem.out.printf(\"%s %s\\n\", player[i].name, player[i].score);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java Sort",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaSort.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\n\n\nclass Student {\n\nprivate int id;\n\nprivate String fname;\n\nprivate double cgpa;\n\n\n\npublic Student(int id, String fname, double cgpa) {\n\nsuper();\n\nthis.id = id;\n\nthis.fname = fname;\n\nthis.cgpa = cgpa;\n\n}\n\n\n\npublic int getId() {\n\nreturn id;\n\n}\n\n\n\npublic String getFname() {\n\nreturn fname;\n\n}\n\n\n\npublic double getCgpa() {\n\nreturn cgpa;\n\n}\n\n}\n\n\n\n// Complete the code\n\npublic class Solution { // JavaSort {\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nint testCases = Integer.parseInt(in.nextLine());\n\n\n\nList<Student> studentList = new ArrayList<Student>();\n\nwhile (testCases > 0) {\n\nint id = in.nextInt();\n\nString fname = in.next();\n\ndouble cgpa = in.nextDouble();\n\n\n\nStudent st = new Student(id, fname, cgpa);\n\nstudentList.add(st);\n\n\n\ntestCases--;\n\n}\n\nCollections.sort(studentList, new Comparator<Student>() {\n\npublic int compare(Student s1, Student s2) {\n\nif (s1.getCgpa() == s2.getCgpa()) {\n\nif (s1.getFname().equals(s2.getFname())) {\n\nreturn s1.getId() - s2.getId();\n\n} else {\n\nreturn s1.getFname().compareTo(s2.getFname());\n\n}\n\n\n\n} else {\n\nreturn (int) (s2.getCgpa() * 1000 - s1.getCgpa() * 1000);\n\n}\n\n}\n\n});\n\n\n\nfor (Student st : studentList) {\n\nSystem.out.println(st.getFname());\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java List",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaList.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaList {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint n = sc.nextInt();\n\nList<Integer> L = new ArrayList<Integer>();\n\nfor (int i = 0; i < n; i++) {\n\nL.add(sc.nextInt());\n\n}\n\nint Q = sc.nextInt();\n\nfor (int i = 0; i < Q; i++) {\n\nString op = sc.next();\n\nif (op.equalsIgnoreCase(\"INSERT\")) {\n\nint index = sc.nextInt();\n\nint item = sc.nextInt();\n\nL.add(index, item);\n\n} else {\n\nL.remove(sc.nextInt());\n\n}\n\n\n\n}\n\nfor (Integer integer : L) {\n\nSystem.out.print(integer + \" \");\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Generics",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaGenerics.java",
		"sol": "\nimport java.io.*;\nimport java.util.*;\npublic class Solution {\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n       Integer [] intArray = {1,2,3};\n       String [] strArray = {\"Hello\",\"World\"};\n       printArray(intArray);\n       printArray(strArray);\n    }\n    private static <T> void printArray(T[] ipList){\n        for(int i=0;i<ipList.length;i++){\n            System.out.println(ipList[i]);\n        }\n    }\n}"
	},
	{
		"name": "Java Stack",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaStack.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Scanner;\n\nimport java.util.Stack;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaStack {\n\nprivate static boolean matchParenthisis(String str) {\n\nStack<Character> st = new Stack<Character>();\n\nchar[] ch = str.toCharArray();\n\nfor (char c : ch) {\n\nif (c == '{' || c == '[' || c == '(') {\n\nst.push(c);\n\n} else {\n\nif (c == ']' && !st.isEmpty() && st.pop() == '[') {\n\ncontinue;\n\n} else if (c == '}' && !st.isEmpty() && st.pop() == '{') {\n\ncontinue;\n\n} else if (c == ')' && !st.isEmpty() && st.pop() == '(') {\n\ncontinue;\n\n} else {\n\nreturn false;\n\n}\n\n}\n\n}\n\n\n\nreturn st.isEmpty();\n\n}\n\n\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nwhile (in.hasNext()) {\n\nString s = in.next();\n\nSystem.out.println(matchParenthisis(s));\n\n}\n\nin.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Dequeue",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaDequeue.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.ArrayDeque;\n\nimport java.util.Deque;\n\nimport java.util.HashSet;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaDequeue {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nDeque<Integer> dq = new ArrayDeque<Integer>();\n\nHashSet<Integer> s = new HashSet<Integer>();\n\nint n = sc.nextInt();\n\nint m = sc.nextInt();\n\nint max = 0;\n\nfor (int i = 0; i < n; i++) {\n\nint tmp = sc.nextInt();\n\ndq.add(tmp);\n\ns.add(tmp);\n\n\n\nif (dq.size() == m) {\n\nmax = Math.max(s.size(), max);\n\nint item = dq.remove();\n\nif (!dq.contains(item)) {\n\ns.remove(item);\n\n}\n\n}\n\n}\n\nSystem.out.println(max);\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java BitSet",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaBitSet.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.BitSet;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaBitSet {\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint N = sc.nextInt();\n\nint M = sc.nextInt();\n\nBitSet b1 = new BitSet(N);\n\nBitSet b2 = new BitSet(N);\n\nfor (int i = 0; i < M; i++) {\n\nString op = sc.next();\n\nint x = sc.nextInt();\n\nint y = sc.nextInt();\n\nswitch (op) {\n\ncase \"AND\":\n\nif (x == 1) {\n\nb1.and(b2);\n\n} else {\n\nb2.and(b1);\n\n}\n\nbreak;\n\ncase \"OR\":\n\nif (x == 1) {\n\nb1.or(b2);\n\n} else {\n\nb2.or(b1);\n\n}\n\nbreak;\n\ncase \"FLIP\":\n\nif (x == 1) {\n\nb1.flip(y);\n\n} else {\n\nb2.flip(y);\n\n}\n\nbreak;\n\ncase \"SET\":\n\nif (x == 1) {\n\nb1.set(y);\n\n} else {\n\nb2.set(y);\n\n}\n\nbreak;\n\ncase \"XOR\":\n\nif (x == 1) {\n\nb1.xor(b2);\n\n} else {\n\nb2.xor(b1);\n\n}\n\nbreak;\n\n}\n\nSystem.out.println(b1.cardinality() + \" \" + b2.cardinality());\n\n\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Priority Queue",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/JavaPriorityQueue.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Comparator;\n\nimport java.util.PriorityQueue;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\n\n\n\n\npublic class Solution { // JavaPriorityQueue {\n\nstatic class Student {\n\nprivate int token;\n\nprivate String fname;\n\nprivate double cgpa;\n\n\n\npublic Student(int id, String fname, double cgpa) {\n\nsuper();\n\nthis.token = id;\n\nthis.fname = fname;\n\nthis.cgpa = cgpa;\n\n}\n\n\n\npublic int getToken() {\n\nreturn token;\n\n}\n\n\n\npublic String getFname() {\n\nreturn fname;\n\n}\n\n\n\npublic double getCgpa() {\n\nreturn cgpa;\n\n}\n\n}\n\n\n\npublic static void main(String[] args) {\n\nScanner sc = new Scanner(System.in);\n\nint t = sc.nextInt();\n\nPriorityQueue<Student> data = new PriorityQueue<Student>(new Comparator<Student>() {\n\n@Override\n\npublic int compare(Student o1, Student o2) {\n\nif (o1.getCgpa() < o2.getCgpa()) {\n\nreturn 1;\n\n} else if (o1.getCgpa() > o2.getCgpa()) {\n\nreturn -1;\n\n} else {\n\nif (o1.getFname().compareTo(o2.getFname()) == 0) {\n\nif (o1.getToken() > o2.getToken()) {\n\nreturn 1;\n\n} else if (o1.getToken() < o2.getToken()) {\n\nreturn -1;\n\n} else {\n\nreturn 0;\n\n}\n\n\n\n} else {\n\nreturn o1.getFname().compareTo(o2.getFname());\n\n}\n\n}\n\n}\n\n});\n\nfor (int i = 0; i < t; i++) {\n\nString op = sc.next();\n\nswitch (op) {\n\ncase \"ENTER\":\n\nString name = sc.next();\n\ndouble cgpa = sc.nextDouble();\n\nint id = sc.nextInt();\n\nStudent s = new Student(id, name, cgpa);\n\ndata.add(s);\n\nbreak;\n\ncase \"SERVED\":\n\nif (data.isEmpty()) {\n\nbreak;\n\n}\n\ndata.remove();\n\n\n\n}\n\n}\n\nif (data.isEmpty())\n\nSystem.out.println(\"EMPTY\");\n\nelse {\n\nwhile (!data.isEmpty()) {\n\nStudent st = data.poll();\n\nSystem.out.println(st.getFname());\n\n}\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java 1D Array (Part 2)",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/datastructures/Java1DArrayPart2.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.datastructures;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // Java1DArrayPart2 {\n\npublic static boolean canWin(int leap, int[] game) {\n\n\n\nreturn canWin(leap, game, 0);\n\n}\n\n\n\npublic static boolean canWin(int leap, int[] g, int i) {\n\nif (i < 0 || g[i] == 1) {\n\nreturn false;\n\n}\n\nif (i + leap >= g.length || i == g.length - 1) {\n\nreturn true;\n\n}\n\ng[i] = 1;\n\n\n\nreturn canWin(leap, g, i + 1) || canWin(leap, g, i + leap) || canWin(leap, g, i - 1);\n\n\n\n}\n\n\n\npublic static void main(String[] args) {\n\nScanner scan = new Scanner(System.in);\n\nint q = scan.nextInt();\n\nwhile (q-- > 0) {\n\nint n = scan.nextInt();\n\nint leap = scan.nextInt();\n\n\n\nint[] game = new int[n];\n\nfor (int i = 0; i < n; i++) {\n\ngame[i] = scan.nextInt();\n\n}\n\n\n\nSystem.out.println((canWin(leap, game)) ? \"YES\" : \"NO\");\n\n}\n\nscan.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Inheritance I",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaInheritanceI.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.oop;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\nclass Animal{\n\nvoid walk(){\n\nSystem.out.println(\"I am walking\");\n\n}\n\n}\n\n\n\n\n\nclass Bird extends Animal{\n\nvoid fly(){\n\nSystem.out.println(\"I am flying\");\n\n}\n\n//code need to be added\n\nvoid sing(){\n\nSystem.out.println(\"I am singing\");\n\n}\n\n}\n\n\n\n\n\npublic class Solution { // JavaInheritanceI {\n\npublic static void main(String args[]){\n\n\n\nBird bird = new Bird();\n\nbird.walk();\n\nbird.fly();\n\nbird.sing();\n\n\n\n}\n\n}\n"
	},
	{
		"name": "Java Inheritance II",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaInheritanceII.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.oop;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\n\n\n// Write your code here\n\nclass Arithmetic {\n\nint add(int a, int b) {\n\nreturn a + b;\n\n}\n\n}\n\n\n\nclass Adder extends Arithmetic {\n\n\n\n}\n\n\n\npublic class Solution { // JavaInheritanceII {\n\npublic static void main(String[] args) {\n\n// Create a new Adder object\n\nAdder a = new Adder();\n\n\n\n// Print the name of the superclass on a new line\n\nSystem.out.println(\"My superclass is: \" + a.getClass().getSuperclass().getName());\n\n\n\n// Print the result of 3 calls to Adder's `add(int,int)` method as 3\n\n// space-separated integers:\n\nSystem.out.print(a.add(10, 32) + \" \" + a.add(10, 3) + \" \" + a.add(10, 10) + \"\\n\");\n\n}\n\n}\n"
	},
	{
		"name": "Java Abstract Class",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaAbstractClass.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.oop;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\nabstract class Book {\n\nString title;\n\n\n\nabstract void setTitle(String s);\n\n\n\nString getTitle() {\n\nreturn title;\n\n}\n\n}\n\n\n\n// Write MyBook class here\n\nclass MyBook extends Book {\n\n\n\nvoid setTitle(String s) {\n\nsuper.title = s;\n\n}\n\n}\n\n\n\npublic class Solution { // JavaAbstractClass {\n\npublic static void main(String[] args) {\n\n// Book new_novel=new Book(); This line prHMain.java:25: error: Book is\n\n// abstract; cannot be instantiated\n\nScanner sc = new Scanner(System.in);\n\nString title = sc.nextLine();\n\nMyBook new_novel = new MyBook();\n\nnew_novel.setTitle(title);\n\nSystem.out.println(\"The title is: \" + new_novel.getTitle());\n\nsc.close();\n\n\n\n}\n\n}\n"
	},
	{
		"name": "Java Interface",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaInterface.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.oop;\n\n\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\n\n\ninterface AdvancedArithmetic {\n\nint divisor_sum(int n);\n\n}\n\n\n\n// Write your code here\n\nclass MyCalculator implements AdvancedArithmetic {\n\npublic int divisor_sum(int n) {\n\nint sum = 0, i = 1;\n\nwhile (n != 0 && i <= n) {\n\nif (n % i == 0) {\n\nsum += i;\n\n}\n\ni++;\n\n}\n\nreturn sum;\n\n}\n\n}\n\n\n\npublic class Solution { // JavaInterface {\n\npublic static void main(String[] args) {\n\nMyCalculator my_calculator = new MyCalculator();\n\nSystem.out.print(\"I implemented: \");\n\nImplementedInterfaceNames(my_calculator);\n\nScanner sc = new Scanner(System.in);\n\nint n = sc.nextInt();\n\nSystem.out.print(my_calculator.divisor_sum(n) + \"\\n\");\n\nsc.close();\n\n}\n\n\n\n/*\n\n* ImplementedInterfaceNames method takes an object and prints the name of the\n\n* interfaces it implemented\n\n*/\n\nstatic void ImplementedInterfaceNames(Object o) {\n\nClass[] theInterfaces = o.getClass().getInterfaces();\n\nfor (int i = 0; i < theInterfaces.length; i++) {\n\nString interfaceName = theInterfaces[i].getName();\n\nSystem.out.println(interfaceName);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java Method Overriding",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaMethodOverriding.java",
		"sol": "\nimport java.io.*;\nimport java.util.*;\nclass Sports {\n   \n    String getName() {\n        return \"Generic Sports\";\n    }\n    void getNumberOfTeamMembers(){\n        System.out.println( \"Each team has n players in \" + getName() );\n    }\n}\nclass Soccer extends Sports {\n    @Override\n     String getName() {\n        return \"Soccer Class\";\n    }\n    @Override\n     void getNumberOfTeamMembers() {\n        System.out.println( \"Each team has 11 players in \" + getName() );\n    }\n}\npublic class Solution {\n    public static void main(String[] args) {\n        Sports c1 = new Sports();\n        Soccer c2 = new Soccer();\n        System.out.println(c1.getName());\n        c1.getNumberOfTeamMembers();\n        System.out.println(c2.getName());\n        c2.getNumberOfTeamMembers();\n    }\n}"
	},
	{
		"name": "Java Method Overriding 2 (Super Keyword)",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaMethodOverriding2SuperKeyword.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.oop;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\n\n\nclass BiCycle {\n\nString define_me() {\n\nreturn \"a vehicle with pedals.\";\n\n}\n\n}\n\n\n\nclass MotorCycle extends BiCycle {\n\nString define_me() {\n\nreturn \"a cycle with an engine.\";\n\n}\n\n\n\nMotorCycle() {\n\nSystem.out.println(\"Hello I am a motorcycle, I am \" + define_me());\n\nString temp = super.define_me(); // Fix this line\n\nSystem.out.println(\"My ancestor is a cycle who is \" + temp);\n\n}\n\n\n\n}\n\n\n\npublic class Solution { // JavaMethodOverriding2SuperKeyword {\n\npublic static void main(String[] args) {\n\nnew MotorCycle();\n\n}\n\n}\n"
	},
	{
		"name": "Java Instanceof keyword",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Object%20Oriented%20Programming/Java%20Instanceof%20keyword/Solution.java",
		"sol": "\nimport java.util.*;\nclass Student{}\nclass Rockstar{   }\nclass Hacker{}\npublic class InstanceOFTutorial{\n   \n   static String count(ArrayList mylist){\n      int a = 0,b = 0,c = 0;\n      for(int i = 0; i < mylist.size(); i++){\n         Object element=mylist.get(i);\n         if(element instanceof Student)\n            a++;\n         if(element instanceof Rockstar)\n            b++;\n         if(element instanceof Hacker)\n            c++;\n      }\n      String ret = Integer.toString(a)+\" \"+ Integer.toString(b)+\" \"+ Integer.toString(c);\n      return ret;\n   }\n   public static void main(String []args){\n      ArrayList mylist = new ArrayList();\n      Scanner sc = new Scanner(System.in);\n      int t = sc.nextInt();\n      for(int i=0; i<t; i++){\n         String s=sc.next();\n         if(s.equals(\"Student\"))mylist.add(new Student());\n         if(s.equals(\"Rockstar\"))mylist.add(new Rockstar());\n         if(s.equals(\"Hacker\"))mylist.add(new Hacker());\n      }\n      System.out.println(count(mylist));\n   }\n}"
	},
	{
		"name": "Java Iterator",
		"link": "https://github.com/Java-aid/Hackerrank-Solutions/blob/master/HackerRankDashboard/Languages/Java/src/main/java/com/javaaid/hackerrank/solutions/languages/java/oop/JavaIterator.java",
		"sol": "\n/**\n\n*\n\n*/\n\n//package com.javaaid.hackerrank.solutions.languages.java.oop;\n\n\n\nimport java.util.ArrayList;\n\nimport java.util.Iterator;\n\nimport java.util.Scanner;\n\n\n\n/**\n\n* @author Kanahaiya Gupta\n\n*\n\n*/\n\npublic class Solution { // JavaIterator {\n\nstatic Iterator func(ArrayList mylist) {\n\nIterator it = mylist.iterator();\n\nwhile (it.hasNext()) {\n\nObject element = it.next();\n\nif (element instanceof String)// Hints: use instanceof operator\n\nbreak;\n\n}\n\nreturn it;\n\n\n\n}\n\n\n\n@SuppressWarnings({ \"unchecked\" })\n\npublic static void main(String[] args) {\n\nArrayList mylist = new ArrayList();\n\nScanner sc = new Scanner(System.in);\n\nint n = sc.nextInt();\n\nint m = sc.nextInt();\n\nfor (int i = 0; i < n; i++) {\n\nmylist.add(sc.nextInt());\n\n}\n\n\n\nmylist.add(\"###\");\n\nfor (int i = 0; i < m; i++) {\n\nmylist.add(sc.next());\n\n}\n\n\n\nIterator it = func(mylist);\n\nwhile (it.hasNext()) {\n\nObject element = it.next();\n\nSystem.out.println((String) element);\n\n}\n\nsc.close();\n\n}\n\n}\n"
	},
	{
		"name": "Java Exception Handling (Try-catch)",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Exception%20Handling/Java%20Exception%20Handling%20(Try-catch)/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.util.Scanner;\n\nimport java.util.InputMismatchException;\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) {\n\nScanner scan = new Scanner(System.in);\n\ntry {\n\nint x = scan.nextInt();\n\nint y = scan.nextInt();\n\nSystem.out.println(x/y);\n\n} catch (InputMismatchException e) {\n\nSystem.out.println(e.getClass().getName());\n\n} catch (ArithmeticException e) {\n\nSystem.out.println(e.getClass().getName() + \": / by zero\");\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java Exception Handling",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Exception%20Handling/Java%20Exception%20Handling/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.util.*;\n\nimport java.util.Scanner;\n\n\n\nclass MyCalculator {\n\nlong power(int n, int p) throws Exception {\n\nif (n < 0 || p < 0) {\n\nthrow new Exception(\"n or p should not be negative.\");\n\n} else if (n == 0 && p == 0) {\n\nthrow new Exception(\"n and p should not be zero.\");\n\n} else {\n\nreturn (long) Math.pow(n, p);\n\n}\n\n}\n\n}\n\n\n\nclass Solution {\n\npublic static void main(String[] args) {\n\nScanner in = new Scanner(System.in);\n\nwhile (in .hasNextInt()) {\n\nint n = in .nextInt();\n\nint p = in .nextInt();\n\nMyCalculator my_calculator = new MyCalculator();\n\ntry {\n\nSystem.out.println(my_calculator.power(n, p));\n\n} catch (Exception e) {\n\nSystem.out.println(e);\n\n}\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java Varargs - Simple Addition",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Varargs%20-%20Simple%20Addition/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.io.*;\n\nimport java.lang.reflect.*;\n\nimport java.util.*;\n\nimport java.text.*;\n\nimport java.math.*;\n\nimport java.util.regex.*;\n\n\n\n// Use a StringBuffer instead of a String since\n\n// concatening Strings is not efficient.\n\nclass Add {\n\nvoid add(int... numbers) {\n\nStringBuffer sb = new StringBuffer();\n\nint sum = 0;\n\nfor (int num : numbers) {\n\nsb.append(num + \"+\");\n\nsum += num;\n\n}\n\nsb.setCharAt(sb.length() - 1, '=');\n\nsb.append(sum);\n\nSystem.out.println(sb);\n\n}\n\n}\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) {\n\ntry {\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\nint n1 = Integer.parseInt(br.readLine());\n\nint n2 = Integer.parseInt(br.readLine());\n\nint n3 = Integer.parseInt(br.readLine());\n\nint n4 = Integer.parseInt(br.readLine());\n\nint n5 = Integer.parseInt(br.readLine());\n\nint n6 = Integer.parseInt(br.readLine());\n\nAdd ob = new Add();\n\nob.add(n1,n2);\n\nob.add(n1,n2,n3);\n\nob.add(n1,n2,n3,n4,n5);\n\nob.add(n1,n2,n3,n4,n5,n6);\n\nMethod[] methods = Add.class.getDeclaredMethods();\n\nSet<String> set = new HashSet();\n\nboolean overload = false;\n\nfor (int i = 0; i < methods.length; i++) {\n\nif (set.contains(methods[i].getName())) {\n\noverload = true;\n\nbreak;\n\n}\n\nset.add(methods[i].getName());\n\n}\n\nif (overload) {\n\nthrow new Exception(\"Overloading not allowed\");\n\n}\n\n} catch(Exception e) {\n\ne.printStackTrace();\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java Reflection - Attributes",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Reflection%20-%20Attributes/Solution.java",
		"sol": "\nimport java.lang.reflect.Method;\n    import java.util.*;\npublic class Solution {\n    public static void main(String[] args) {\n        Class student = Student.class;\n        Method[] methods = student.getDeclaredMethods();\n        ArrayList<String> methodList = new ArrayList<>();\n        for(Method m : methods){\n            methodList.add(m.getName());\n        }\n        Collections.sort(methodList);\n        for(String name: methodList){\n            System.out.println(name);\n        }\n    }\n}\nclass Student{\npublic void ahqym(){}\npublic void amftc(){}\npublic void anotherfunction(){}\npublic void atcks(){}\npublic void bwkbd(){}\npublic void cfwyc(){}\npublic void cmkxa(){}\npublic void dnpym(){}\npublic void dnqvo(){}\npublic void dvvwq(){}\npublic void ehjdm(){}\npublic void elyed(){}\npublic void fmyce(){}\npublic void getEmail(){}\npublic void getId(){}\npublic void getName(){}\npublic void ghtlj(){}\npublic void hluvb(){}\npublic void isqdf(){}\npublic void iwhtf(){}\npublic void jmopy(){}\npublic void jnskt(){}\npublic void kbjlt(){}\npublic void kgwku(){}\npublic void khuag(){}\npublic void levtp(){}\npublic void mcgme(){}\npublic void migyc(){}\npublic void moebl(){}\npublic void nixhb(){}\npublic void odyqp(){}\npublic void ogvdl(){}\npublic void ormim(){}\npublic void piwro(){}\npublic void plaob(){}\npublic void pnruo(){}\npublic void pqfct(){}\npublic void ptrup(){}\npublic void pvgyp(){}\npublic void qthde(){}\npublic void rmjig(){}\npublic void setEmail(){}\npublic void setId(){}\npublic void setName(){}\npublic void sumvl(){}\npublic void tkbpp(){}\npublic void tntpj(){}\npublic void toxdp(){}\npublic void twyfa(){}\npublic void uccfq(){}\npublic void ujxei(){}\npublic void vhxoi(){}\npublic void viwuu(){}\npublic void viyog(){}\npublic void whjtj(){}\npublic void ytijy(){}\n}"
	},
	{
		"name": "Can You Access?",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Can%20You%20Access/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.io.*;\n\nimport java.lang.reflect.*;\n\nimport java.util.*;\n\nimport java.util.regex.*;\n\nimport java.security.*;\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) throws Exception {\n\nDoNotTerminate.forbidExit();\n\ntry {\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\nint num = Integer.parseInt(br.readLine().trim());\n\nObject o; // Must be used to hold the reference of the instance of the class Solution.Inner.Private\n\no = new Inner().new Private();\n\nSystem.out.println(num + \" is \" + ((Solution.Inner.Private) o).powerof2(num));\n\nSystem.out.println(\"An instance of class: \" + o.getClass().getCanonicalName() + \" has been created\");\n\n} // end of try\n\ncatch (DoNotTerminate.ExitTrappedException e) {\n\nSystem.out.println(\"Unsuccessful Termination!!\");\n\n}\n\n} //end of main\n\nstatic class Inner {\n\nprivate class Private {\n\nprivate String powerof2(int num){\n\nreturn ((num&num-1) == 0) ? \"power of 2\" : \"not a power of 2\";\n\n}\n\n}\n\n} // end of Inner\n\n} // end of Solution\n\n\n\nclass DoNotTerminate { // This class prevents exit(0)\n\npublic static class ExitTrappedException extends SecurityException {\n\nprivate static final long serialVersionUID = 1L;\n\n}\n\n\n\npublic static void forbidExit() {\n\nfinal SecurityManager securityManager = new SecurityManager() {\n\n@Override\n\npublic void checkPermission(Permission permission) {\n\nif (permission.getName().contains(\"exitVM\")) {\n\nthrow new ExitTrappedException();\n\n}\n\n}\n\n};\n\nSystem.setSecurityManager(securityManager);\n\n}\n\n}\n"
	},
	{
		"name": "Prime Checker",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Prime%20Checker/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport java.text.*;\n\nimport java.math.*;\n\nimport java.util.regex.*;\n\nimport java.lang.reflect.*;\n\n\n\nimport static java.lang.System.in;\n\n\n\nclass Prime {\n\nvoid checkPrime(int... numbers) {\n\nfor (int num : numbers) {\n\nif (isPrime(num)) {\n\nSystem.out.print(num + \" \");\n\n}\n\n}\n\nSystem.out.println();\n\n}\n\n\n\nboolean isPrime(int n) {\n\nif (n < 2) {\n\nreturn false;\n\n} else if (n == 2) {     // account for even numbers now, so that we can do i+=2 in loop below\n\nreturn true;\n\n} else if (n % 2 == 0) { // account for even numbers now, so that we can do i+=2 in loop below\n\nreturn false;\n\n}\n\nint sqrt = (int) Math.sqrt(n);\n\nfor (int i = 3; i <= sqrt; i += 2) { // skips even numbers for faster results\n\nif (n % i == 0) {\n\nreturn false;\n\n}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) {\n\ntry {\n\nBufferedReader br = new BufferedReader(new InputStreamReader(in));\n\nint n1 = Integer.parseInt(br.readLine());\n\nint n2 = Integer.parseInt(br.readLine());\n\nint n3 = Integer.parseInt(br.readLine());\n\nint n4 = Integer.parseInt(br.readLine());\n\nint n5 = Integer.parseInt(br.readLine());\n\nPrime ob = new Prime();\n\nob.checkPrime(n1);\n\nob.checkPrime(n1,n2);\n\nob.checkPrime(n1,n2,n3);\n\nob.checkPrime(n1,n2,n3,n4,n5);\n\nMethod[] methods = Prime.class.getDeclaredMethods();\n\nSet<String> set = new HashSet();\n\nboolean overload = false;\n\nfor (int i = 0; i < methods.length; i++) {\n\nif (set.contains(methods[i].getName())) {\n\noverload = true;\n\nbreak;\n\n}\n\nset.add(methods[i].getName());\n\n}\n\nif (overload) {\n\nthrow new Exception(\"Overloading not allowed\");\n\n}\n\n} catch (Exception e) {\n\nSystem.out.println(e);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java Factory Pattern",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Factory%20Pattern/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.util.*;\n\nimport java.security.*;\n\n\n\ninterface Food {\n\npublic String getType();\n\n}\n\n\n\nclass Pizza implements Food {\n\npublic String getType() {\n\nreturn \"Someone ordered a Fast Food!\";\n\n}\n\n}\n\n\n\nclass Cake implements Food {\n\npublic String getType() {\n\nreturn \"Someone ordered a Dessert!\";\n\n}\n\n}\n\n\n\nclass FoodFactory {\n\npublic Food getFood(String order) {\n\nswitch (order.toLowerCase()) {\n\ncase \"pizza\":\n\nreturn new Pizza();\n\ncase \"cake\":\n\nreturn new Cake();\n\ndefault:\n\nreturn null;\n\n}\n\n} // End of getFood method\n\n} // End of factory class\n\n\n\npublic class Solution {\n\npublic static void main(String args[]) {\n\nDo_Not_Terminate.forbidExit();\n\ntry {\n\nScanner sc = new Scanner(System.in);\n\n//creating the factory\n\nFoodFactory foodFactory = new FoodFactory();\n\n\n\n//factory instantiates an object\n\nFood food = foodFactory.getFood(sc.nextLine());\n\n\n\nSystem.out.println(\"The factory returned \" + food.getClass());\n\nSystem.out.println(food.getType());\n\n} catch (Do_Not_Terminate.ExitTrappedException e) {\n\nSystem.out.println(\"Unsuccessful Termination!!\");\n\n}\n\n}\n\n}\n\n\n\nclass Do_Not_Terminate {\n\npublic static class ExitTrappedException extends SecurityException {\n\nprivate static final long serialVersionUID = 1L;\n\n}\n\n\n\npublic static void forbidExit() {\n\nfinal SecurityManager securityManager = new SecurityManager() {\n\n@Override\n\npublic void checkPermission(Permission permission) {\n\nif (permission.getName().contains(\"exitVM\")) {\n\nthrow new ExitTrappedException();\n\n}\n\n}\n\n};\n\nSystem.setSecurityManager(securityManager);\n\n}\n\n}\n"
	},
	{
		"name": "Java Singleton Pattern",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Singleton%20Pattern/Solution.java",
		"sol": "\nimport java.io.*;\nimport java.util.*;\nclass Singleton {\n    public static String str;\n    private Singleton(String str) {\n        System.out.println(\"Hello I am a singleton! Let me say \" + str + \" to you\");\n    }\n    static void getSingleInstance(String str) {\n        new Singleton(str);\n    }\n}\npublic class Solution {\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n         Scanner s = new Scanner(System.in);\n        Singleton.getSingleInstance(s.nextLine());\n    }\n}"
	},
	{
		"name": "Java Visitor Pattern",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Visitor%20Pattern/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.util.ArrayList;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport java.text.*;\n\nimport java.math.*;\n\nimport java.util.regex.*;\n\n\n\nimport java.util.ArrayList;\n\nimport java.util.Scanner;\n\n\n\nenum Color {\n\nRED, GREEN\n\n}\n\n\n\nabstract class Tree {\n\nprivate int value;\n\nprivate Color color;\n\nprivate int depth;\n\n\n\npublic Tree(int value, Color color, int depth) {\n\nthis.value = value;\n\nthis.color = color;\n\nthis.depth = depth;\n\n}\n\n\n\npublic int getValue() {\n\nreturn value;\n\n}\n\n\n\npublic Color getColor() {\n\nreturn color;\n\n}\n\n\n\npublic int getDepth() {\n\nreturn depth;\n\n}\n\n\n\npublic abstract void accept(TreeVis visitor);\n\n}\n\n\n\nclass TreeNode extends Tree {\n\nprivate ArrayList<Tree> children = new ArrayList();\n\n\n\npublic TreeNode(int value, Color color, int depth) {\n\nsuper(value, color, depth);\n\n}\n\n\n\npublic void accept(TreeVis visitor) {\n\nvisitor.visitNode(this);\n\nfor (Tree child : children) {\n\nchild.accept(visitor);\n\n}\n\n}\n\n\n\npublic void addChild(Tree child) {\n\nchildren.add(child);\n\n}\n\n}\n\n\n\nclass TreeLeaf extends Tree {\n\npublic TreeLeaf(int value, Color color, int depth) {\n\nsuper(value, color, depth);\n\n}\n\n\n\npublic void accept(TreeVis visitor) {\n\nvisitor.visitLeaf(this);\n\n}\n\n}\n\n\n\nabstract class TreeVis {\n\npublic abstract int getResult();\n\npublic abstract void visitNode(TreeNode node);\n\npublic abstract void visitLeaf(TreeLeaf leaf);\n\n\n\n}\n\n\n\n// Useful tutorial for Visitor Pattern:\n\n// https://www.tutorialspoint.com/design_pattern/visitor_pattern.htm\n\n//\n\n// I recommend skipping this problem since it's more about creating a\n\n// tree in an obscure format than it is about Visitor patterns.\n\n\n\nclass SumInLeavesVisitor extends TreeVis {\n\nprivate int result = 0;\n\n\n\npublic int getResult() {\n\nreturn result;\n\n}\n\n\n\npublic void visitNode(TreeNode node) {\n\n// do nothing\n\n}\n\n\n\npublic void visitLeaf(TreeLeaf leaf) {\n\nresult += leaf.getValue();\n\n}\n\n}\n\n\n\nclass ProductOfRedNodesVisitor extends TreeVis {\n\nprivate long result = 1;\n\nprivate final int M = 1000000007;\n\n\n\npublic int getResult() {\n\nreturn (int) result;\n\n}\n\n\n\npublic void visitNode(TreeNode node) {\n\nif (node.getColor() == Color.RED) {\n\nresult = (result * node.getValue()) % M;\n\n}\n\n}\n\n\n\npublic void visitLeaf(TreeLeaf leaf) {\n\nif (leaf.getColor() == Color.RED) {\n\nresult = (result * leaf.getValue()) % M;\n\n}\n\n}\n\n}\n\n\n\nclass FancyVisitor extends TreeVis {\n\nprivate int nonLeafEvenDepthSum = 0;\n\nprivate int greenLeavesSum = 0;\n\n\n\npublic int getResult() {\n\nreturn Math.abs(nonLeafEvenDepthSum - greenLeavesSum);\n\n}\n\n\n\npublic void visitNode(TreeNode node) {\n\nif (node.getDepth() % 2 == 0) {\n\nnonLeafEvenDepthSum += node.getValue();\n\n}\n\n}\n\n\n\npublic void visitLeaf(TreeLeaf leaf) {\n\nif (leaf.getColor() == Color.GREEN) {\n\ngreenLeavesSum += leaf.getValue();\n\n}\n\n}\n\n}\n\n\n\npublic class Solution {\n\nprivate static int [] values;\n\nprivate static Color [] colors;\n\nprivate static HashMap<Integer, HashSet<Integer>> map;\n\n\n\npublic static Tree solve() {\n\nScanner scan = new Scanner(System.in);\n\nint numNodes = scan.nextInt();\n\n\n\n/* Save nodes and colors */\n\nvalues = new int[numNodes];\n\ncolors = new Color[numNodes];\n\nmap = new HashMap(numNodes);\n\nfor (int i = 0; i < numNodes; i++) {\n\nvalues[i] = scan.nextInt();\n\n}\n\nfor (int i = 0; i < numNodes; i++) {\n\ncolors[i] = scan.nextInt() == 0 ? Color.RED : Color.GREEN;\n\n}\n\n\n\n/* Save edges */\n\nfor (int i = 0; i < numNodes - 1; i++) {\n\nint u = scan.nextInt();\n\nint v = scan.nextInt();\n\n\n\n/* Edges are undirected: Add 1st direction */\n\nHashSet<Integer> uNeighbors = map.get(u);\n\nif (uNeighbors == null) {\n\nuNeighbors = new HashSet();\n\nmap.put(u, uNeighbors);\n\n}\n\nuNeighbors.add(v);\n\n\n\n/* Edges are undirected: Add 2nd direction */\n\nHashSet<Integer> vNeighbors = map.get(v);\n\nif (vNeighbors == null) {\n\nvNeighbors = new HashSet();\n\nmap.put(v, vNeighbors);\n\n}\n\nvNeighbors.add(u);\n\n}\n\nscan.close();\n\n\n\n/* Handle 1-node tree */\n\nif (numNodes == 1) {\n\nreturn new TreeLeaf(values[0], colors[0], 0);\n\n}\n\n\n\n/* Create Tree */\n\nTreeNode root = new TreeNode(values[0], colors[0], 0);\n\naddChildren(root, 1);\n\nreturn root;\n\n}\n\n\n\n/* Recursively adds children of a TreeNode */\n\nprivate static void addChildren(TreeNode parent, Integer parentNum) {\n\n/* Get HashSet of children and loop through them */\n\nfor (Integer treeNum : map.get(parentNum)) {\n\nmap.get(treeNum).remove(parentNum); // removes the opposite arrow direction\n\n\n\n/* Add child */\n\nHashSet<Integer> grandChildren = map.get(treeNum);\n\nboolean childHasChild = (grandChildren != null && !grandChildren.isEmpty());\n\nTree tree;\n\nif (childHasChild) {\n\ntree = new TreeNode(values[treeNum - 1], colors[treeNum - 1], parent.getDepth() + 1);\n\n} else {\n\ntree = new TreeLeaf(values[treeNum - 1], colors[treeNum - 1], parent.getDepth() + 1);\n\n}\n\nparent.addChild(tree);\n\n\n\n/* Recurse if necessary */\n\nif (tree instanceof TreeNode) {\n\naddChildren((TreeNode) tree, treeNum);\n\n}\n\n}\n\n}\n\n\n\npublic static void main(String[] args) {\n\nTree root = solve();\n\n\n\nSumInLeavesVisitor vis1       = new SumInLeavesVisitor();\n\nProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();\n\nFancyVisitor vis3             = new FancyVisitor();\n\n\n\nroot.accept(vis1);\n\nroot.accept(vis2);\n\nroot.accept(vis3);\n\n\n\nint res1 = vis1.getResult();\n\nint res2 = vis2.getResult();\n\nint res3 = vis3.getResult();\n\n\n\nSystem.out.println(res1);\n\nSystem.out.println(res2);\n\nSystem.out.println(res3);\n\n}\n\n}\n"
	},
	{
		"name": "Java Annotations",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Annotations/Solution.java",
		"sol": "\nimport java.lang.annotation.*;\nimport java.lang.reflect.*;\nimport java.util.*;\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@interface FamilyBudget {\n   String userRole() default \"GUEST\";\n   int budgetLimit() default 50;\n}\nclass FamilyMember {\n   @FamilyBudget(userRole=\"SENIOR\", budgetLimit=100)\n   public void seniorMember(int budget, int moneySpend) {\n      System.out.println(\"Senior Member\");\n      System.out.println(\"Spend: \" + moneySpend);\n      System.out.println(\"Budget Left: \" + (budget - moneySpend));\n   }\n   @FamilyBudget(userRole=\"JUNIOR\", budgetLimit=50)\n   public void juniorUser(int budget, int moneySpend) {\n      System.out.println(\"Junior Member\");\n      System.out.println(\"Spend: \" + moneySpend);\n      System.out.println(\"Budget Left: \" + (budget - moneySpend));\n   }\n}\npublic class Solution {\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int testCases = Integer.parseInt(in.nextLine());\n      while (testCases > 0) {\n         String role = in.next();\n         int spend = in.nextInt();\n         try {\n            Class annotatedClass = FamilyMember.class;\n            Method[] methods = annotatedClass.getMethods();\n            for (Method method : methods) {\n               if (method.isAnnotationPresent(FamilyBudget.class)) {\n                  FamilyBudget family = method\n                        .getAnnotation(FamilyBudget.class);\n                  String userRole = family.userRole();\n                  int budgetLimit = family.budgetLimit();\n                  if (userRole.equals(role)) {\n                     if(budgetLimit - spend >= 0){\n                        method.invoke(FamilyMember.class.newInstance(),\n                              budgetLimit, spend);\n                     }else{\n                        System.out.println(\"Budget Limit Over\");\n                     }\n                  }\n               }\n            }\n         } catch (Exception e) {\n            e.printStackTrace();\n         }\n         testCases--;\n      }\n   }\n}"
	},
	{
		"name": "Covariant Return Types",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Covariant%20Return%20Types/Solution.java",
		"sol": "\nimport java.io.*;\nimport java.util.*;\nclass Flower{\n    String whatsYourName(){\n        return \"I have many names of flowers\";\n    }\n}\nclass Lily extends Flower{\n    String whatsYourName(){\n        return \"Lily\";\n    }\n}\nclass Jasmine extends Flower{\n    String whatsYourName(){\n        return \"Jasmine\";\n    }\n}\nclass Region{\n    Flower yourNationalFlower(){\n    return new Flower();\n    }\n}\nclass AndhraPradesh extends Region {\n    Lily yourNationalFlower(){\n        return new Lily();\n    }\n}\nclass WestBengal extends Region{\n    Jasmine yourNationalFlower(){\n        return new Jasmine();\n    }\n}\npublic class Solution {\n    public static void main(String[] args) {\n    Scanner input = new Scanner(System.in);\n    String Region= input.nextLine();\n    //System.out.println(Region);\n    if(Region.equals(\"AndhraPradesh\")){\n        AndhraPradesh business=new AndhraPradesh();\n        Lily finished=business.yourNationalFlower();\n        System.out.println(finished.whatsYourName());\n    }\n    if(Region.equals(\"WestBengal\")){\n        WestBengal casual=new WestBengal();\n        Jasmine Done=casual.yourNationalFlower();\n        System.out.println(Done.whatsYourName());\n    }\n    }\n}"
	},
	{
		"name": "Java Lambda Expressions",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20Lambda%20Expressions/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.io.*;\n\nimport java.util.*;\n\ninterface PerformOperation {\n\nboolean check(int a);\n\n}\n\nclass MyMath {\n\npublic static boolean checker(PerformOperation p, int num) {\n\nreturn p.check(num);\n\n}\n\n\n\npublic static PerformOperation is_odd() {\n\nreturn n -> (n & 1) == 1;\n\n}\n\n\n\npublic static PerformOperation is_prime() {\n\n// O(n^(1/2)) runtime\n\nreturn n -> {\n\nif (n < 2) {\n\nreturn false;\n\n}\n\nint sqrt = (int) Math.sqrt(n);\n\nfor (int i = 2; i <= sqrt; i++) {\n\nif (n % i == 0) {\n\nreturn false;\n\n}\n\n}\n\nreturn true;\n\n};\n\n}\n\n\n\npublic static PerformOperation is_palindrome() {\n\nreturn n -> {\n\nString original = Integer.toString(n);\n\nString reversed = new StringBuilder(Integer.toString(n)).reverse().toString();\n\nreturn original.equals(reversed);\n\n};\n\n}\n\n}\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) throws IOException {\n\nMyMath ob = new MyMath();\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\nint T = Integer.parseInt(br.readLine());\n\nPerformOperation op;\n\nboolean ret = false;\n\nString ans = null;\n\nwhile (T--> 0) {\n\nString s = br.readLine().trim();\n\nStringTokenizer st = new StringTokenizer(s);\n\nint ch = Integer.parseInt(st.nextToken());\n\nint num = Integer.parseInt(st.nextToken());\n\nif (ch == 1) {\n\nop = ob.is_odd();\n\nret = ob.checker(op, num);\n\nans = (ret) ? \"ODD\" : \"EVEN\";\n\n} else if (ch == 2) {\n\nop = ob.is_prime();\n\nret = ob.checker(op, num);\n\nans = (ret) ? \"PRIME\" : \"COMPOSITE\";\n\n} else if (ch == 3) {\n\nop = ob.is_palindrome();\n\nret = ob.checker(op, num);\n\nans = (ret) ? \"PALINDROME\" : \"NOT PALINDROME\";\n\n}\n\nSystem.out.println(ans);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java MD5",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20MD5/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.util.Scanner;\n\nimport java.security.MessageDigest;\n\nimport java.security.NoSuchAlgorithmException;\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) throws NoSuchAlgorithmException {\n\n/* Read and save the input String */\n\nScanner scan = new Scanner(System.in);\n\nString str = scan.next();\n\nscan.close();\n\n\n\n/* Encode the String using MD5 */\n\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\nmd.update(str.getBytes());\n\nbyte[] digest = md.digest();\n\n\n\n/* Print the encoded value in hexadecimal */\n\nfor (byte b : digest) {\n\nSystem.out.format(\"%02x\", b);\n\n}\n\n}\n\n}\n"
	},
	{
		"name": "Java SHA-256",
		"link": "https://github.com/RodneyShag/HackerRank_solutions/blob/master/Java/Advanced/Java%20SHA-256/Solution.java",
		"sol": "\n// github.com/RodneyShag\n\n\n\nimport java.util.Scanner;\n\nimport java.security.MessageDigest;\n\nimport java.security.NoSuchAlgorithmException;\n\n\n\npublic class Solution {\n\npublic static void main(String[] args) throws NoSuchAlgorithmException {\n\n/* Read and save the input String */\n\nScanner scan = new Scanner(System.in);\n\nString str = scan.next();\n\nscan.close();\n\n\n\n/* Encode the String using SHA-256 */\n\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n\nmd.update(str.getBytes());\n\nbyte[] digest = md.digest();\n\n\n\n/* Print the encoded value in hexadecimal */\n\nfor (byte b : digest) {\n\nSystem.out.format(\"%02x\", b);\n\n}\n\n}\n\n}\n"
	}
]